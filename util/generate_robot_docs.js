/* eslint-disable */
const fs = require("fs");
const path = require("path");

const ValetudoRobotFactory = require("../lib/core/ValetudoRobotFactory");
const Configuration = require("../lib/Configuration");

function generateAnchor(str) {
    return str.replace(/[^0-9a-z-A-Z]/g, "").toLowerCase()
}

process.on("uncaughtException", function(err) {
    if (err.errno === "EADDRINUSE") {
        //lol
    } else {
        console.log(err);
        process.exit(1);
    }
});

const vendors = {};

Object.values(ValetudoRobotFactory.Robots).forEach(robotClass => {
    const config = new Configuration();
    config.set("embedded", false);

    try {
        const instance = new robotClass({
            config: config
        });

        vendors[instance.getManufacturer()] = vendors[instance.getManufacturer()] ? vendors[instance.getManufacturer()] : {};

        vendors[instance.getManufacturer()][instance.constructor.name] = {
            modelName: instance.getModelName(),
            capabilities: Object.keys(instance.capabilities).sort()
        }
    } catch (e) {
        console.log("lol");
    }
});

const header = `
---
title: Supported Robots
category: General
order: 7
---

# Supported Robots

This page features an autogenerated overview of all robots supported by Valetudo including their supported capabilities.<br/>
To find out what those do, check out the [capabilities overview](https://valetudo.cloud/pages/general/capabilities-overview.html) section of the docs.

This is just the autogenerated overview because it's hard to write documentation for everything and keep that up to date. <br/>
Keep in mind that rooting instructions will differ for each of these **or might not even be available at all**.<br/>

Again:<br/>
This is just an autogenerated overview based on the codebase at the time of generation.<br/>
Don't take this as "Everything listed here will be 100% available and work all the time".<br/>

`;

const ToC = [
    "## Table of Contents"
];
const VendorSections = [];


Object.keys(vendors).sort().forEach((vendor, i) => {
    let vendorTocEntry = [
        (i+1) + ". [" + vendor +"](#" + generateAnchor(vendor) + ")"
    ];

    // noinspection JSMismatchedCollectionQueryUpdate
    let vendorSection = [
        "## " + vendor + '<a id="'+generateAnchor(vendor)+'"></a>',
        ""
    ]


    const vendorRobots = vendors[vendor];

    Object.keys(vendorRobots).sort().forEach((robotImplName, i) => {
        const robot = vendorRobots[robotImplName];

        vendorTocEntry.push("    " + (i+1) + ". [" + robot.modelName +"](#" + generateAnchor(vendor) + "_" + generateAnchor(robot.modelName) + ")");

        vendorSection.push(
            "### " + robot.modelName + '<a id="'+generateAnchor(vendor) + "_" + generateAnchor(robot.modelName)+'"></a>',
            "",
            "This model supports the following capabilities:"
        );

        robot.capabilities.forEach(capability => {
            vendorSection.push("  - [" + capability + "](https://valetudo.cloud/pages/general/capabilities-overview.html#" + capability + ")");
        });

        vendorSection.push("", "");
    })


    ToC.push(vendorTocEntry.join("\n"));
    VendorSections.push(vendorSection.join("\n"));
})

const page = [
    header,
    ToC.join("\n"),
    VendorSections.join("\n"),
    "<br/><br/><br/><br/><br/>",
    "This page has been autogenerated.<br/>",
    "Autogeneration timestamp: " + new Date().toISOString()
]

fs.writeFileSync(path.join(__dirname, "../docs/_pages/general/supported-robots.md"), page.join("\n"))
process.exit(0);
